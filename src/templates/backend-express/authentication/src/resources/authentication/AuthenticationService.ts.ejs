'use strict';

import { raw } from 'objection';
import bcrypt from 'bcrypt';
import jsonwebtoken from 'jsonwebtoken';

import Service from '../Service';
import AuthenticationModel from './Authentication';
import errorUtil from '../../utils/errors';

interface Credentials {
  email: string;
  password: string;
}

export default {
  ...Service(AuthenticationModel),

  /**
   * Registers a new password for an email
   */
  register: (record: AuthenticationModel) => {
    if (
      !record ||
      (typeof record.authority_id !== 'undefined' &&
        record.authority_id !== null &&
        record.authority_id <= 0) ||
      !record.email ||
      !record.password
    ) {
      throw errorUtil.getInvalidArgumentError('register');
    }

    return AuthenticationModel.query().insert(record);
  },

  /**
   * Authenticates with an email and password
   */
  authenticate: (credentials: Credentials) => {
    if (!credentials || !credentials.email || !credentials.password) {
      throw errorUtil.getInvalidArgumentError('authenticate');
    }

    return AuthenticationModel.query()
      .findOne(raw('LOWER(email)'), credentials.email.toLowerCase())
      .then((result) => {
        if (typeof result === 'undefined') {
          throw errorUtil.getAuthenticationError('no entry found');
        }

        if (!result.password || !bcrypt.compareSync(credentials.password, result.password)) {
          throw errorUtil.getAuthenticationError('invalid password');
        }

        return jsonwebtoken.sign(
          {
            data: {
              authorityId: result.authority_id,
            },
          },
          process.env.JWT_SECRET as string,
          { expiresIn: process.env.JWT_EXPIRES_IN || '30d' }
        );
      });
  },

  /**
   * Provided a JWT token, this api returns who the authority is
   * and if it's still valid
   */
  verify: (token: string) => {
    if (!token) {
      throw errorUtil.getInvalidArgumentError('verify');
    }

    try {
      return jsonwebtoken.verify(token, process.env.JWT_SECRET as string);
    } catch (error) {
      throw errorUtil.getInvalidTokenError(error.name + ': ' + error.message);
    }
  },

  /**
   * Deletes an authentication record from the database by the authorityId
   */
  deleteByAuthorityId: (authorityId: number) => {
    if (!authorityId) {
      throw errorUtil.getInvalidArgumentError('delete');
    }

    return AuthenticationModel.query()
      .where('authority_id', authorityId)
      .delete();
  },
};
