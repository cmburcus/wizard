'use strict';

const chai = require('chai');

const expect = chai.expect;

const jwtUtil = require.main.app('utils/jwt');

describe('TESTING UTIL: jwt', () => {
  describe('getTokenFromHeader', () => {
    it('it should return a string if the authorization header exists and is valid', () => {
      const mockToken = 'mockToken';
      const mockRequest = {
        headers: {
          authorization: `Bearer ${mockToken}`,
        },
      };

      let result = null;

      try {
        result = jwtUtil.getTokenFromHeader(mockRequest);
      } catch (error) {
        result = error;
      }

      expect(result)
        .to.be.a('string')
        .and.equal(mockToken);
    });

    it('it should throw error if the headers are missing', () => {
      const mockRequest = {};

      let result = null;

      try {
        result = jwtUtil.getTokenFromHeader(mockRequest);
      } catch (error) {
        result = error;
      }

      expect(result).to.be.an('error');
      expect(result)
        .to.have.property('type')
        .equal('InvalidTokenError');
      expect(result)
        .to.have.property('status')
        .equal(401);
      expect(result)
        .to.have.property('error')
        .equal('No authorization header found');
    });

    it('it should throw error if the authorization header is missing', () => {
      const mockRequest = {
        headers: {},
      };

      let result = null;

      try {
        result = jwtUtil.getTokenFromHeader(mockRequest);
      } catch (error) {
        result = error;
      }

      expect(result).to.be.an('error');
      expect(result)
        .to.have.property('type')
        .equal('InvalidTokenError');
      expect(result)
        .to.have.property('status')
        .equal(401);
      expect(result)
        .to.have.property('error')
        .equal('No authorization header found');
    });

    it('it should throw error if the authorization header has no value', () => {
      const mockRequest = {
        headers: { authorization: null },
      };

      let result = null;

      try {
        result = jwtUtil.getTokenFromHeader(mockRequest);
      } catch (error) {
        result = error;
      }

      expect(result).to.be.an('error');
      expect(result)
        .to.have.property('type')
        .equal('InvalidTokenError');
      expect(result)
        .to.have.property('status')
        .equal(401);
      expect(result)
        .to.have.property('error')
        .equal('No authorization header found');
    });

    it('it should throw error if the authorization header does not include the word Bearer', () => {
      const mockToken = 'mockToken';
      const mockRequest = {
        headers: {
          authorization: ` ${mockToken}`,
        },
      };

      let result = null;

      try {
        result = jwtUtil.getTokenFromHeader(mockRequest);
      } catch (error) {
        result = error;
      }

      expect(result).to.be.an('error');
      expect(result)
        .to.have.property('type')
        .equal('InvalidTokenError');
      expect(result)
        .to.have.property('status')
        .equal(401);
      expect(result)
        .to.have.property('error')
        .equal('The authorization header is malformed');
    });

    it('it should throw error if the authorization header does not include space between Bearer and token', () => {
      const mockToken = 'mockToken';
      const mockRequest = {
        headers: {
          authorization: `Bearer${mockToken}`,
        },
      };

      let result = null;

      try {
        result = jwtUtil.getTokenFromHeader(mockRequest);
      } catch (error) {
        result = error;
      }

      expect(result).to.be.an('error');
      expect(result)
        .to.have.property('type')
        .equal('InvalidTokenError');
      expect(result)
        .to.have.property('status')
        .equal(401);
      expect(result)
        .to.have.property('error')
        .equal('The authorization header is malformed');
    });

    it('it should throw error if the authorization header has too many elements', () => {
      const mockToken = 'mockToken';
      const mockRequest = {
        headers: {
          authorization: `Bearer ${mockToken} test`,
        },
      };

      let result = null;

      try {
        result = jwtUtil.getTokenFromHeader(mockRequest);
      } catch (error) {
        result = error;
      }

      expect(result).to.be.an('error');
      expect(result)
        .to.have.property('type')
        .equal('InvalidTokenError');
      expect(result)
        .to.have.property('status')
        .equal(401);
      expect(result)
        .to.have.property('error')
        .equal('The authorization header is malformed');
    });
  });
});
