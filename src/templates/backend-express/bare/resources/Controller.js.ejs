'use strict';

const status = require('http-status');

/**
 * This controller handles the route request/response lifecycle. It's assumed
 * the data passed to this controller has already passed through route validation
 * using middlewares
 */
module.exports = (service) => ({
  /**
   * Fetches a list of records
   *
   * @param {object} request
   * @param {object} response
   *
   * @returns {json} List of records or error
   */
  query: async (request, response, next) => {
    try {
      const records = await service.query(request.query);

      response.status(status.OK).json(records);
    } catch (error) {
      next(error);
    }
  },

  /**
   * Fetches a record by id
   *
   * @param {object} request
   * @param {object} response
   *
   * @returns {json} Record or error
   */
  show: async (request, response, next) => {
    try {
      const record = await service.show(request.params.id);

      response.status(record ? status.OK : status.NOT_FOUND).json(record);
    } catch (error) {
      next(error);
    }
  },

  /**
   * Creates a new record
   *
   * @param {object} request
   * @param {object} response
   *
   * @returns {json} Record or error
   */
  create: async (request, response, next) => {
    try {
      const record = await service.create(request.body);

      response.status(status.CREATED).json(record);
    } catch (error) {
      next(error);
    }
  },

  /**
   * Updates an existing record
   *
   * @param {object} request
   * @param {object} response
   *
   * @returns {json} Record or error
   */
  update: async (request, response, next) => {
    try {
      const record = await service.update(request.params.id, request.body);

      response.status(status.OK).json(record);
    } catch (error) {
      next(error);
    }
  },

  /**
   * Removes a record from the database
   *
   * @param {object} request
   * @param {object} response
   *
   * @returns {number} Number of deleted records
   */
  delete: async (request, response, next) => {
    try {
      const numberOfRecords = await service.delete(request.params.id);

      response.status(numberOfRecords > 0 ? status.OK : status.NOT_FOUND).json(numberOfRecords);
    } catch (error) {
      next(error);
    }
  },
});
