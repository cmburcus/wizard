'use strict';

import chai from 'chai';
import Joi from 'joi';

import validationOptions from '../../../utils/validator/config/joi.json';
import validator from '../../../utils/validator';

const expect = chai.expect;

// Mock data
let mockRequest: any = null;

function truthyCondition() {
  return [{ count: 0 }];
}
function falsyCondition() {
  return [{ count: 1 }];
}

describe('TESTING UTIL: validator', () => {
  beforeEach(() => {
    mockRequest = {
      body: {},
    };
  });

  describe('validate', () => {
    it('it validates a schema and returns a joi error if it fails', async () => {
      const schema = Joi.object().keys({
        keyOne: Joi.string().max(5),
        keyTwo: Joi.string().email(),
        keyThree: Joi.number(),
      });
      const data: object = {
        keyOne: '123456',
        keyTwo: 'notanemail',
        keyThree: null,
      };

      let result = null;

      try {
        result = await validator.validate(data, schema);
      } catch (error) {
        result = error;
      }

      expect(result).to.be.an('error');
      expect(result)
        .to.have.property('isJoi')
        .equal(true);
      expect(result)
        .to.have.property('name')
        .equal('ValidationError');
      expect(result)
        .to.have.property('_object')
        .be.an('object')
        .and.equal(data);
      expect(result)
        .to.have.property('details')
        .be.an('array');

      expect(result)
        .to.have.nested.property('details[0].message')
        .be.a('string');
      expect(result)
        .to.have.nested.property('details[0].path')
        .be.an('array')
        .and.have.lengthOf(1);
      expect(result)
        .to.have.nested.property('details[0].path[0]')
        .be.a('string')
        .and.equal('keyOne');
      expect(result)
        .to.have.nested.property('details[0].type')
        .equal('string.max');
      expect(result)
        .to.have.nested.property('details[0].context')
        .be.an('object');
      expect(result)
        .to.have.nested.property('details[0].context.limit')
        .equal(5);
      expect(result)
        .to.have.nested.property('details[0].context.value')
        .equal('123456');
      expect(result)
        .to.have.nested.property('details[0].context.key')
        .equal('keyOne');
      expect(result)
        .to.have.nested.property('details[0].context.label')
        .equal('keyOne');

      expect(result)
        .to.have.nested.property('details[1].message')
        .be.a('string');
      expect(result)
        .to.have.nested.property('details[1].path')
        .be.an('array')
        .and.have.lengthOf(1);
      expect(result)
        .to.have.nested.property('details[1].path[0]')
        .be.a('string')
        .and.equal('keyTwo');
      expect(result)
        .to.have.nested.property('details[1].type')
        .equal('string.email');
      expect(result)
        .to.have.nested.property('details[1].context')
        .be.an('object');
      expect(result)
        .to.have.nested.property('details[1].context.value')
        .equal('notanemail');
      expect(result)
        .to.have.nested.property('details[1].context.key')
        .equal('keyTwo');
      expect(result)
        .to.have.nested.property('details[1].context.label')
        .equal('keyTwo');

      expect(result)
        .to.have.nested.property('details[2].message')
        .be.a('string');
      expect(result)
        .to.have.nested.property('details[2].path')
        .be.an('array')
        .and.have.lengthOf(1);
      expect(result)
        .to.have.nested.property('details[2].path[0]')
        .be.a('string')
        .and.equal('keyThree');
      expect(result)
        .to.have.nested.property('details[2].type')
        .equal('number.base');
      expect(result)
        .to.have.nested.property('details[2].context')
        .be.an('object');
      expect(result)
        .to.have.nested.property('details[2].context.key')
        .equal('keyThree');
      expect(result)
        .to.have.nested.property('details[2].context.label')
        .equal('keyThree');
    });

    it('it validates a schema and returns the object if it succeeds', async () => {
      const schema = Joi.object().keys({
        keyOne: Joi.string().max(5),
        keyTwo: Joi.string().email(),
        keyThree: Joi.number(),
      });
      const data = {
        keyOne: '12345',
        keyTwo: 'anemail@example.com',
        keyThree: 123,
      };

      let result = null;

      try {
        result = await validator.validate(data, schema);
      } catch (error) {
        result = error;
      }

      expect(result)
        .to.be.an('object')
        .and.deep.equal(data);
    });
  });

  describe('validateSchema', () => {
    beforeEach(() => {
      mockRequest = {
        body: {},
      };
    });

    it('it calls the callback with no value if valid', async () => {
      const schema = Joi.object().keys({
        keyOne: Joi.string().max(5),
        keyTwo: Joi.string().email(),
        keyThree: Joi.number(),
      });

      mockRequest.body = {
        keyOne: '12345',
        keyTwo: 'anemail@example.com',
        keyThree: 123,
      };

      let result = null;

      try {
        // @ts-ignore
        await validator.validateSchema(schema)(mockRequest, null, function(possibleError: Error) {
          result = possibleError;
        });
      } catch (error) {
        result = null;
      }

      expect(result).to.be.undefined;
    });

    it('it calls the callback with an error if not valid', async () => {
      const schema = Joi.object().keys({
        keyOne: Joi.string().max(5),
        keyTwo: Joi.string().email(),
        keyThree: Joi.number(),
      });

      mockRequest.body = {
        keyOne: '123456',
        keyTwo: 'notanemail',
        keyThree: null,
      };

      let result = null;

      try {
        // @ts-ignore
        await validator.validateSchema(schema)(mockRequest, null, function(possibleError: Error) {
          result = possibleError;
        });
      } catch (error) {
        result = null;
      }

      expect(result).to.be.an('error');
      expect(result)
        .to.have.property('type')
        .equal('ValidationError');
    });

    it('it calls the callback with an error if system error occured', async () => {
      let result = null;

      try {
        // @ts-ignore
        await validator.validateSchema(null)(null, null, function(possibleError: Error) {
          result = possibleError;
        });
      } catch (error) {
        result = null;
      }

      expect(result).to.be.an('error');
      expect(result).to.not.have.property('type');
    });
  });

  describe('uniqueField', () => {
    beforeEach(() => {
      mockRequest = {
        body: { field: 1 },
        params: { id: 2 },
      };
    });

    it('it ignores the call if the value of the field is null', async () => {
      mockRequest.body.field = null;

      let result = null;

      try {
        // @ts-ignore
        await validator.uniqueField('field', truthyCondition)(mockRequest, null, function(
          possibleError: Error
        ) {
          result = possibleError;
        });
      } catch (error) {
        result = null;
      }

      expect(result).to.be.undefined;
    });

    it('it ignores the call if the value of the field is undefined', async () => {
      mockRequest.body.field = undefined;

      let result = null;

      try {
        // @ts-ignore
        await validator.uniqueField('field', truthyCondition)(mockRequest, null, function(
          possibleError: Error
        ) {
          result = possibleError;
        });
      } catch (error) {
        result = null;
      }

      expect(result).to.be.undefined;
    });

    it('it calls the callback with no value if valid and not excluding current', async () => {
      let result = null;

      try {
        // @ts-ignore
        await validator.uniqueField('field', truthyCondition)(mockRequest, null, function(
          possibleError: Error
        ) {
          result = possibleError;
        });
      } catch (error) {
        result = null;
      }

      expect(result).to.be.undefined;
    });

    it('it calls the callback with no value if valid and excluding current', async () => {
      let result = null;

      try {
        // @ts-ignore
        await validator.uniqueField('field', truthyCondition, 'id')(mockRequest, null, function(
          possibleError: Error
        ) {
          result = possibleError;
        });
      } catch (error) {
        result = null;
      }

      expect(result).to.be.undefined;
    });

    it('it calls the callback with an error if not valid', async () => {
      let result = null;

      try {
        // @ts-ignore
        await validator.uniqueField('field', falsyCondition)(mockRequest, null, function(
          possibleError: Error
        ) {
          result = possibleError;
        });
      } catch (error) {
        result = null;
      }

      expect(result).to.be.an('error');
      expect(result)
        .to.have.property('type')
        .equal('ValidationError');
    });

    it('it throws an invalid argument error if field is not a string', async () => {
      let result = null;

      try {
        // @ts-ignore
        await validator.uniqueField(123, truthyCondition)(mockRequest, null, function(
          possibleError: Error
        ) {
          result = possibleError;
        });
      } catch (error) {
        result = null;
      }

      expect(result).to.be.an('error');
      expect(result)
        .to.have.property('type')
        .equal('InvalidArgumentError');
    });

    it('it throws an invalid argument error if exclude current is not a string', async () => {
      let result = null;

      try {
        // @ts-ignore
        await validator.uniqueField('field', truthyCondition, 123)(mockRequest, null, function(
          possibleError: Error
        ) {
          result = possibleError;
        });
      } catch (error) {
        result = null;
      }

      expect(result).to.be.an('error');
      expect(result)
        .to.have.property('type')
        .equal('InvalidArgumentError');
    });
  });

  describe('formatJoiError', () => {
    it('it formats a Joi error', async () => {
      const schema = Joi.object().keys({
        keyOne: Joi.string().max(5),
        keyTwo: Joi.string().email(),
        keyThree: Joi.number(),
      });
      const data: object = {
        keyOne: '123456',
        keyTwo: 'notanemail',
        keyThree: null,
      };

      let result = null;

      try {
        result = await Joi.validate(data, schema, validationOptions);
      } catch (error) {
        result = validator.formatJoiError(error);
      }

      expect(result).to.be.an('object');
      expect(result)
        .to.have.property('original')
        .equal(data);
      expect(result)
        .to.have.property('errors')
        .be.an('object');
      expect(result)
        .to.have.nested.property('errors.keyOne')
        .be.an('array')
        .and.have.lengthOf(1);
      expect(result)
        .to.have.nested.property('errors.keyOne[0].type')
        .be.a('string')
        .and.equal('string.max');
      expect(result)
        .to.have.nested.property('errors.keyOne[0].message')
        .be.a('string');
      expect(result)
        .to.have.nested.property('errors.keyTwo')
        .be.an('array')
        .and.have.lengthOf(1);
      expect(result)
        .to.have.nested.property('errors.keyTwo[0].type')
        .be.a('string')
        .and.equal('string.email');
      expect(result)
        .to.have.nested.property('errors.keyTwo[0].message')
        .be.a('string');
      expect(result)
        .to.have.nested.property('errors.keyThree')
        .be.an('array')
        .and.have.lengthOf(1);
      expect(result)
        .to.have.nested.property('errors.keyThree[0].type')
        .be.a('string')
        .and.equal('number.base');
      expect(result)
        .to.have.nested.property('errors.keyThree[0].message')
        .be.a('string');
    });
  });

  describe('getUniqueFieldError', () => {
    it('it formats a Joi error', (done) => {
      const data = { keyOne: 'test', keyTwo: 'test' };

      const result = validator.getUniqueFieldError('keyOne', data);

      expect(result).to.be.an('object');
      expect(result)
        .to.have.property('original')
        .equal(data);
      expect(result)
        .to.have.property('errors')
        .be.an('object');
      expect(result)
        .to.have.nested.property('errors.keyOne')
        .be.an('array')
        .and.have.lengthOf(1);
      expect(result)
        .to.have.nested.property('errors.keyOne[0].type')
        .be.a('string')
        .and.equal('field.unique');
      expect(result)
        .to.have.nested.property('errors.keyOne[0].message')
        .be.a('string');

      done();
    });
  });
});
