'use strict';

import chai from 'chai';
import bcrypt from 'bcrypt';

import AuthenticationModel from '../../../../resources/Authentication/Model';

const expect = chai.expect;

describe('UNIT: Authentication Model', () => {
  it('it should encrypt the password before inserting', async () => {
    const model = await AuthenticationModel.fromJson({
      authority_id: 1, // eslint-disable-line @typescript-eslint/camelcase
      email: 'test@testing.com',
      password: 'password',
    });

    model.$beforeInsert();

    expect(model)
      .to.have.property('password')
      .be.a('string')
      .and.not.equal('password');
    expect(bcrypt.compareSync('password', model.password as string)).to.equal(true);
  });

  it('it should encrypt the password before updating if it exists', async () => {
    const model = await AuthenticationModel.fromJson({
      authority_id: 1, // eslint-disable-line @typescript-eslint/camelcase
      email: 'test@testing.com',
      password: 'password',
    });

    model.$beforeUpdate();

    expect(model)
      .to.have.property('password')
      .be.a('string')
      .and.not.equal('password');
    expect(bcrypt.compareSync('password', model.password as string)).to.equal(true);
  });

  it('it should ignore the password encryption before updating if it does not exist', async () => {
    const model = await AuthenticationModel.fromJson({
      authority_id: 1, // eslint-disable-line @typescript-eslint/camelcase
      email: 'test@testing.com',
      password: 'password',
    });

    delete model.password;

    model.$beforeUpdate();

    expect(model).to.not.have.property('password');
  });

  it('it should not return the password when formatting as json', async () => {
    const model = await AuthenticationModel.fromJson({
      authority_id: 1, // eslint-disable-line @typescript-eslint/camelcase
      email: 'test@testing.com',
      password: 'password',
    });

    expect(model.toJSON()).to.not.have.property('password');
  });
});
