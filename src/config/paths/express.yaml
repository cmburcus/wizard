---
###############################################################################################
#
# This file defines the paths of directories and subdirectories of an express backend project
#
###############################################################################################

# The base template directories where the template files are found
templates:
  express:
    path: backend-express/bare
  expressAuth:
    path: backend-express/authentication

# The core directories and files of an express backend project (destination folder)
# The templates should use the same folder structure for easy mapping
core:
  # The core directories in an express project
  directories:
    path: /
    bin:
      path: bin
    src:
      path: src
      config:
        path: src/config
      database:
        path: src/database
        migrations:
          path: src/database/migrations
        seeds:
          path: src/database/seeds
      resources:
        path: src/resources
      tests:
        path: src/tests
        integration:
          path: src/tests/integration
        unit:
          path: src/tests/unit
          resources:
            path: src/tests/unit/resources

  # The core files in an express project
  files:
    main:
      packageJson: package.json
      nodeVersion: .node-version
      gitignore: .gitignore
      eslintrc: .eslintrc
      envExample: .env.example
      env: .env
      app: app.js
      www: www
      nodemon: nodemon.json
      nycrc: .nycrc
      wizard: .wizard
    config:
      database: database.js
      routes: routes.js
    database:
      knexfile: knexfile.js
      migrationStub: migration.stub
    resources:
      model: Model.js
      service: Service.js
      controller: Controller.js
    tests:
      unit:
        resources:
          model: Model.test.js
          service: Service.test.js
          controller: Controller.test.js

# Utils are essentially helpers that provide functionality to the core application
# They are treated separately as they are not "required" for an application to run
# They could also be exported to a package repository and imported using package.json
utils:
  # The directories used by utils
  directories:
    path: src/utils
    errors:
      path: src/utils/errors
      types:
        path: src/utils/errors/types
      tests:
        unit:
          path: src/tests/unit/utils
    filters:
      path: src/utils/filters
      constants:
        path: src/utils/filters/constants
      tests:
        unit:
          path: src/tests/unit/utils
    validator:
      path: src/utils/validator
      config:
        path: src/utils/validator/config
      tests:
        unit:
          path: src/tests/unit/utils
    jwt:
      path: src/utils/jwt
      tests:
        unit:
          path: src/tests/unit/utils

  # The util files
  files:
    errors:
      readme: readme.md
      index: index.js
      types:
        authenticationError: AuthenticationError.js
        invalidArgumentError: InvalidArgumentError.js
        invalidTokenError: InvalidTokenError.js
        notFoundError: NotFoundError.js
        systemError: SystemError.js
        validationError: ValidationError.js
      tests:
        unit:
          errors: errors.test.js
    filters:
      readme: readme.md
      index: index.js
      constants:
        filters: filters.json
      tests:
        unit:
          filters: filters.test.js
    validator:
      readme: readme.md
      index: index.js
      config:
        joi: joi.json
      tests:
        unit:
          validator: validator.test.js
    jwt:
      readme: readme.md
      index: index.js
      tests:
        unit:
          jwt: jwt.test.js

# Authentication specific directories and files
authentication:
  # The directories used for authentication
  # These are relative to the core directories and should be appended
  directories:
    resources:
      path: authentication

  # The files used for authentication
  files:
    database:
      migrations:
        authenticationTable: 00000000000000_create_authentications_table.js
    resources:
      main:
        model: Authentication.js
        service: AuthenticationService.js
        controller: AuthenticationController.js
        routes: routes.js
    tests:
      integration:
        api: api.test.js
        service: AuthenticationService.test.js
        validation: validation.js
      unit:
        resources:
          model: Authentication.test.js
